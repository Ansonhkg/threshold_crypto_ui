/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function get_rng_values_size(): number;
export function set_rng_value(a: number, b: number): void;
export function set_sk_byte(a: number, b: number): void;
export function get_sk_byte(a: number): number;
export function set_pk_byte(a: number, b: number): void;
export function get_pk_byte(a: number): number;
export function set_sig_byte(a: number, b: number): void;
export function get_sig_byte(a: number): number;
export function set_msg_byte(a: number, b: number): void;
export function get_msg_byte(a: number): number;
export function set_ct_byte(a: number, b: number): void;
export function get_ct_byte(a: number): number;
export function get_rng_next_count(): number;
export function set_poly_byte(a: number, b: number): void;
export function get_poly_byte(a: number): number;
export function set_msk_byte(a: number, b: number): void;
export function get_msk_byte(a: number): number;
export function set_mpk_byte(a: number, b: number): void;
export function get_mpk_byte(a: number): number;
export function set_mc_byte(a: number, b: number): void;
export function get_mc_byte(a: number): number;
export function set_skshare_byte(a: number, b: number): void;
export function get_skshare_byte(a: number): number;
export function set_pkshare_byte(a: number, b: number): void;
export function get_pkshare_byte(a: number): number;
export function set_bivar_row_byte(a: number, b: number, c: number, d: number): void;
export function get_bivar_row_byte(a: number, b: number, c: number): number;
export function set_bivar_commitments_byte(a: number, b: number, c: number): void;
export function get_bivar_commitments_byte(a: number, b: number): number;
export function set_bivar_sks_byte(a: number, b: number, c: number): void;
export function get_bivar_sks_byte(a: number, b: number): number;
export function set_bivar_pks_byte(a: number, b: number, c: number): void;
export function get_bivar_pks_byte(a: number, b: number): number;
export function set_signature_share_byte(a: number, b: number, c: number): void;
export function get_signature_share_byte(a: number, b: number): number;
export function set_share_indexes(a: number, b: number): void;
export function get_share_indexes(a: number): number;
export function set_decryption_shares_byte(a: number, b: number, c: number): void;
export function get_decryption_shares_byte(a: number, b: number): number;
export function derive_pk_from_sk(): void;
export function sign_msg(a: number): void;
export function verify(a: number): number;
export function encrypt(a: number): number;
export function decrypt(a: number): number;
export function generate_poly(a: number): void;
export function get_poly_degree(a: number): number;
export function get_mc_degree(a: number): number;
export function derive_master_key(a: number): void;
export function derive_key_share(a: number, b: number): void;
export function generate_bivars(a: number, b: number): void;
export function combine_signature_shares(a: number, b: number): void;
export function create_decryption_share(a: number, b: number): number;
export function combine_decryption_shares(a: number, b: number, c: number): number;
